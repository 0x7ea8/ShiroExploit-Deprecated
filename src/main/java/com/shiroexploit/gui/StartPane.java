package com.shiroexploit.gui;

import com.shiroexploit.util.Config;
import com.shiroexploit.util.HttpRequest;
import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;


public class StartPane extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Pane borderPane = new StartPane().getPane();
        primaryStage.setTitle("Shiro550/721漏洞检测  by飞鸿");
        primaryStage.setScene(new Scene(borderPane, 800, 300));
        primaryStage.show();
    }

    private TextField urlTextField = new TextField();
    private ComboBox<String> comboBox = new ComboBox<>();
    private TextArea cookieTextArea = new TextArea();
    private Button next = new Button("下一步");
    private BorderPane borderPane = new BorderPane();


    public StartPane(){
        drawPane();
        addListeners();
    }

    public Pane getPane() {
        return borderPane;
    }


    public void update(){
        String url = Config.getInstance().getTargetURL();
        if(url != null && !url.equals("")){
            urlTextField.setText(url);
        }

        int vul = Config.getInstance().getVulType();
        comboBox.getSelectionModel().select(vul);

        String rememberMeCookie = Config.getInstance().getRememberMeCookie();
        if(rememberMeCookie != null && !rememberMeCookie.equals("")){
            cookieTextArea.setText(rememberMeCookie);
        }
    }

    private void addListeners(){
        comboBox.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                if(newValue.equalsIgnoreCase("shiro721")){
                    cookieTextArea.setDisable(false);
                }

                if(newValue.equalsIgnoreCase("shiro550")){
                    cookieTextArea.setDisable(true);
                }
            }
        });

        next.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                String url = urlTextField.getText();
                String cookie = cookieTextArea.getText();

                boolean bool = validateURL(url);
                if(comboBox.getSelectionModel().getSelectedIndex() == 1){
                    bool = bool && validateCookie(url, cookie);
                }

                if(bool){
                    Config.getInstance().setTargetURL(urlTextField.getText().trim());
                    Config.getInstance().setVulType(comboBox.getSelectionModel().getSelectedIndex());
                    if(cookie.startsWith("rememberMe=")){
                        Config.getInstance().setRememberMeCookie(cookieTextArea.getText().trim().split("=",2)[1]);
                    }

                    Stage newStage = new Stage();
                    ConfigPane configPane = new ConfigPane(StartPane.this);
                    Pane next = configPane.getPane();
                    configPane.update();
                    newStage.setTitle("Shiro550/721漏洞检测  by飞鸿");
                    newStage.setScene(new Scene(next, 550, 380));
                    Stage currentStage = (Stage)borderPane.getScene().getWindow();
                    currentStage.hide();
                    newStage.show();
                }
            }
        });
    }

    private void drawPane(){
        borderPane.setPadding(new Insets(10,10,10,10));

        BorderPane bp = new BorderPane();
        bp.setPadding(new Insets(10,10,10,10));

        Label label = new Label("URL");
        label.setPrefHeight(35);
        urlTextField.setPrefHeight(35);

        List<String> data = new ArrayList<>();
        data.add("Shiro550");
        data.add("Shiro721");
        comboBox.setItems(FXCollections.observableArrayList(data));
        comboBox.setPrefHeight(35);
        comboBox.getSelectionModel().select(0);

        bp.setLeft(label);
        bp.setMargin(label, new Insets(0,10,0,0));
        bp.setCenter(this.urlTextField);
        bp.setMargin(this.urlTextField, new Insets(0,10,0,0));
        bp.setRight(this.comboBox);
        borderPane.setTop(bp);

        cookieTextArea.setPrefHeight(300);
        cookieTextArea.setWrapText(true);
        cookieTextArea.setPromptText("rememberMe=dGhpcyBpcyBhIGRlbW9uc3RyYXRpb24gc3RyaW5nCg==");
        cookieTextArea.setDisable(true);
        borderPane.setCenter(this.cookieTextArea);
        borderPane.setMargin(cookieTextArea, new Insets(10,10,0,10));

        HBox hbox = new HBox();
        hbox.getChildren().add(this.next);
        hbox.setAlignment(Pos.CENTER);
        borderPane.setBottom(hbox);
        borderPane.setMargin(hbox, new Insets(10,10,0,0));
    }

    private boolean validateURL(String url){
        try{
            URL u = new URL(url);
        } catch (MalformedURLException e) {
            PromptMessageUI.getAlert("URL格式不正确","请输入正确格式的URL");
            return false;
        }

        try{
            HttpRequest.request(url);
        } catch (IOException e) {
            PromptMessageUI.getAlert("URL无法正常访问","目标地址无法正常访问");
            return false;
        }

        return true;
    }


    private boolean validateCookie(String url, String cookie){
        if(!cookie.startsWith("rememberMe=")){
            PromptMessageUI.getAlert("cookie格式不正确","请输入正确格式的rememberMe cookie");
            return false;
        }

        String rememberMe = cookie.split("=",2)[1];
        if(HttpRequest.request(url, rememberMe)){
            return true;
        }else{
            PromptMessageUI.getAlert("无效cookie","您输入的cookie无法正常使用");
        }

        return false;
    }
}