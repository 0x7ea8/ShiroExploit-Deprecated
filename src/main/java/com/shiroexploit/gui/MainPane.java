package com.shiroexploit.gui;

import com.shiroexploit.util.ExploitFailedException;
import com.shiroexploit.vulnverifier.Verifier;
import com.shiroexploit.vulnverifier.VerifierFactory;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import java.io.PrintStream;

public class MainPane {
    private TextField cmd = new TextField();
    private TextArea textArea = new TextArea();
    private Button execute = new Button();
    private BorderPane borderPane = new BorderPane();
    private PrintStream printStream;
    private Verifier verifier;

    public MainPane(){
        drawPane();
        addListeners();
        //如此一来，简单太多了，原来的代码也不需要修改
        //参考 https://blog.csdn.net/qq_41886200/article/details/93711993
        printStream = new PrintStream(new Console(textArea));
        System.setOut(printStream);
        System.setErr(printStream);
        verifier = VerifierFactory.getInstance().getVerifier();
    }

    public Pane getPane() {
        return borderPane;
    }

    private void addListeners(){
        execute.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                String command = cmd.getText().trim();
                if(command == null || command.equals("")){
                    PromptMessageUI.getAlert("输入错误","请输入一条有效的命令");
                    return;
                }

                cmd.setDisable(true);
                execute.setDisable(true);
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        verifier.executeCmd(command);
                        cmd.setDisable(false);
                        execute.setDisable(false);
                        cmd.clear();
                        Platform.runLater(new Runnable() {
                            @Override
                            public void run() {
                                cmd.requestFocus();
                            }
                        });
                    }
                }).start();
            }
        });

        cmd.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                //按Enter键时，具有和点击“执行”按钮同样的效果
                if(event.getCode() == KeyCode.ENTER){
                    execute.fire();
                }
            }
        });

        //当textarea获得焦点时，清除其中的文字
        //参考http://www.it1352.com/960364.html
//        cmd.focusedProperty().addListener(new ChangeListener<Boolean>() {
//            @Override
//            public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
//                if(newValue){
//                    cmd.clear();
//                }
//            }
//        });
    }

    private void drawPane(){
        BorderPane top = new BorderPane();
        top.setPadding(new Insets(10,10,10,10));

        Label label = new Label("命令");
        label.setPrefHeight(35);
        top.setMargin(label, new Insets(0,10,0,0));
        cmd.setDisable(true);
        cmd.setPrefHeight(35);
        top.setLeft(label);
        top.setCenter(cmd);

        execute.setText("执行");
        execute.setDisable(true);
        top.setMargin(execute, new Insets(0,0,0,10));
        top.setRight(execute);

        textArea.setEditable(false);

        borderPane.setPadding(new Insets(10,10,10,10));
        borderPane.setTop(top);
        borderPane.setCenter(textArea);
        borderPane.setMargin(textArea, new Insets(10,10,10,10));
    }

    public void startRuning(){

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    verifier.getValidGadget();
                    cmd.setDisable(false);
                    execute.setDisable(false);
                } catch (ExploitFailedException e) {
                    System.out.println(e.getMessage());
                    System.out.println("[!] Target is not vulnerable or can not exploit");
                    System.out.println("[!] Window will be closed in 5 seconds");
                    try {
                        Thread.sleep(5000);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                    Stage currentStage = (Stage)borderPane.getScene().getWindow();
                    Platform.runLater(new Runnable() {
                        @Override
                        public void run() {
                            currentStage.close();
                        }
                    });
                }
            }
        });
        thread.start();
    }
}
