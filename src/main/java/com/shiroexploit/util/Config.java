package com.shiroexploit.util;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

public class Config {
    private static Config config;
    private List<String> kyes;
    private String targetURL;
    private String rememberMeCookie;
    private int vulType;
    private boolean useJRMP;
    private boolean skipIfFound;
    private String ceyeDomain;
    private String ceyeToken;
    private String OOBServerAddress;
    private int HTTPServicePort;
    private int JRMPServicePort;
    private String command;
    private int delay;
    private static String path = System.getProperty("user.dir") + File.separator + "config.txt";

    private Config(){
        initializeConfig();
    }

    public static Config getInstance(){
        //懒汉式
        if(config == null){
            config = new Config();
        }

        return config;
    }

    public int getJRMPServicePort() {
        return JRMPServicePort;
    }

    public List<String> getKyes() {
        return kyes;
    }

    public String getTargetURL() {
        return targetURL;
    }

    public String getRememberMeCookie() {
        return rememberMeCookie;
    }

    public int getVulType() {
        return vulType;
    }

    public boolean isUseJRMP() {
        return useJRMP;
    }

    public boolean isSkipIfFound() {
        return skipIfFound;
    }

    public String getCeyeDomain() {
        return ceyeDomain;
    }

    public String getCeyeToken() {
        return ceyeToken;
    }

    public String getOOBServerAddress() {
        return OOBServerAddress;
    }

    public int getHTTPServicePort() {
        return HTTPServicePort;
    }

    public String getCommand() {
        return command;
    }

    public int getDelay() {
        return delay;
    }


    private List<String> getKeys() throws IOException {
        List<String> keys = new ArrayList<>();
        InputStream in = new BufferedInputStream(new FileInputStream(path));
        Properties prop = new Properties();
        prop.load(in);

        for(Map.Entry<Object, Object> entry : prop.entrySet()){
            String keyName = (String)entry.getKey();
            if(keyName.startsWith("Key")){
                keys.add((String)entry.getValue());
            }
        }

        try {
            if(in != null) in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return keys;
    }

    private String getConfig(String key) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(path));
        Properties prop = new Properties();
        prop.load(in);

        String result = null;
        for(Map.Entry<Object, Object> entry : prop.entrySet()){
            String keyName = (String)entry.getKey();
            if(keyName.trim().equalsIgnoreCase(key.toLowerCase())){
                result =  (String)entry.getValue();
                result = result.trim();
                break;
            }
        }

        try {
            if(in != null) in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return result;
    }

    private void initializeConfig(){
        try{
            this.kyes = getKeys();

            this.targetURL = getConfig("TargetURL");
            if(targetURL == null || targetURL.equals("")){
                System.out.println("[!] 请设置一个目标URL");
                System.exit(0);
            }else{
                try{
                    URL url = new URL(this.targetURL);
                }catch(MalformedURLException e){
                    System.out.println("[!] 您提供的目标地址不是一个有效的URL");
                    System.exit(0);
                }

            }


            String temp = getConfig("VulType");
            try{
                if(temp == null || temp.equals("") || (Integer.parseInt(temp) !=1 && Integer.parseInt(temp) !=2)){
                    System.out.println("[!] 请选择一个正确的漏洞类型");
                    System.out.println("    - VulType=1 代表Shiro550");
                    System.out.println("    - VulType=2 代表Shiro721");
                    System.exit(0);
                }

                this.vulType = Integer.parseInt(temp);
            }catch (NumberFormatException e){
                System.out.println("[!] 请填入一个正确的漏洞类型");
                System.out.println("    - VulType=1 代表Shiro550");
                System.out.println("    - VulType=2 代表Shiro721");
                System.exit(0);
            }


            this.rememberMeCookie = getConfig("RememberMeCookie");
            if(this.vulType == 2){
                if(this.rememberMeCookie == null || this.rememberMeCookie.equals("")){
                    System.out.println("[!] 请提供一个有效的rememberMe Cookie");
                    System.exit(0);
                }
            }

            temp = getConfig("UseJRMP");
            if(temp == null || temp.equals("")){
                this.useJRMP = false;
            }else{
                this.useJRMP = temp.equalsIgnoreCase("true") ? true : false;
            }

            temp = getConfig("SkipIfFound");
            if(temp == null || temp.equals("")){
                this.skipIfFound = false;
            }else{
                this.skipIfFound = temp.equalsIgnoreCase("true") ? true : false;
            }

            this.ceyeDomain = getConfig("Domain");
            this.ceyeToken = getConfig("Token");

            this.OOBServerAddress = getConfig("ServerAddress");
            temp = getConfig("HTTPPort");
            try{
                if(temp != null && !temp.equals("")){
                    this.HTTPServicePort = Integer.parseInt(temp);
                }else{
                    this.HTTPServicePort = -1;
                }
            }catch (NumberFormatException e){
                this.HTTPServicePort = -1;
            }

            temp = getConfig("JRMPPort");
            try{
                if(temp != null && !temp.equals("")){
                    this.JRMPServicePort = Integer.parseInt(temp);
                }else{
                    this.JRMPServicePort = -1;
                }
            }catch (NumberFormatException e){
                this.JRMPServicePort = -1;
            }

            this.command = getConfig("IP");
            if(this.command == null || this.command.equals("")){
                System.out.println("[!] 您必须指定一条有效的命令");
                System.exit(0);
            }
            
            temp = getConfig("Delay");
            if(temp == null || temp.equals("")){
                System.out.println("[!] 您必须指定获取结果的延迟时间");
                System.exit(0);
            }
            try{
                this.delay = Integer.parseInt(temp);
            }catch(NumberFormatException e){
                System.out.println("[!] 您指定的延迟时间不正确");
                System.exit(0);
            }

        }catch(IOException e){
            System.out.println("[!] 未找到配置文件");
            System.exit(0);
        }
    }

    private boolean testOOBServerConnection() {
        String url = "http://" + this.OOBServerAddress + ":" + this.HTTPServicePort + "/echo";
        String result = null;
        try{
             result = HttpRequest.request(url);
        }catch (IOException e){
            return false;
        }

        if(result != null && result.trim().equals("OK")){
            return true;
        }

        return false;
    }

    private boolean isValidToken() {
        String url = "http://api.ceye.io/v1/records?token=" + this.ceyeToken + "&type=http&filter=";
        String result = null;
        try{
            result = HttpRequest.request(url);
        }catch (IOException e){
            return false;
        }

        if(result == null){
            return false;
        }

        if(result != null && result.trim().contains("User Not Exists")){
            return false;
        }

        return true;
    }

    public boolean isOOBServerSetProperly(){
        if(this.OOBServerAddress == null || this.OOBServerAddress.equals("")) return false;
        if(this.HTTPServicePort == -1) return false;
        if(this.JRMPServicePort == -1) return false;

        boolean bool = testOOBServerConnection();
        if(!bool){
            System.out.println("[-] OOBServer无法正常连接，将使用Ceye进行尝试");
        }

        return bool;
    }

    public boolean isCeyeConfigSetProperly(){
        if(this.ceyeDomain == null || this.ceyeDomain.equals("")) return false;
        if(this.ceyeToken == null || this.ceyeToken.equals("")) return false;

        boolean bool = isValidToken();
        if(!bool){
            System.out.println("[-] Ceye API Token配置不正确，无法正常使用");
        }

        return bool;
    }

    public boolean isTargetURLVisitable(){
        try{
            String result = HttpRequest.request(Config.getInstance().getTargetURL());
            if(result == null){
                return false;
            }
        } catch (IOException e) {
            return false;
        }

        return true;
    }
}
